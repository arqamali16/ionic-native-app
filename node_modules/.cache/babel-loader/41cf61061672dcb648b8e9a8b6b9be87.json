{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { checkAvailability, getPlugin } from './common';\n\nfunction overrideFunction(pluginObj, methodName) {\n  return new Observable(function (observer) {\n    var availabilityCheck = checkAvailability(pluginObj, methodName);\n\n    if (availabilityCheck === true) {\n      var pluginInstance_1 = getPlugin(pluginObj.constructor.getPluginRef());\n      pluginInstance_1[methodName] = observer.next.bind(observer);\n      return function () {\n        return pluginInstance_1[methodName] = function () {};\n      };\n    } else {\n      observer.error(availabilityCheck);\n      observer.complete();\n    }\n  });\n}\n\nexport function cordovaFunctionOverride(pluginObj, methodName, args) {\n  if (args === void 0) {\n    args = [];\n  }\n\n  return overrideFunction(pluginObj, methodName);\n}","map":{"version":3,"sources":["../../../../src/@ionic-native/core/decorators/cordova-function-override.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAAqC,MAArC;AAEA,SAAS,iBAAT,EAA4B,SAA5B,QAA6C,UAA7C;;AAEA,SAAS,gBAAT,CAA0B,SAA1B,EAA0C,UAA1C,EAA4D;AAC1D,SAAO,IAAI,UAAJ,CAAe,UAAC,QAAD,EAAwB;AAC5C,QAAM,iBAAiB,GAAG,iBAAiB,CAAC,SAAD,EAAY,UAAZ,CAA3C;;AAEA,QAAI,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,UAAM,gBAAc,GAAG,SAAS,CAAC,SAAS,CAAC,WAAV,CAAsB,YAAtB,EAAD,CAAhC;AACA,MAAA,gBAAc,CAAC,UAAD,CAAd,GAA6B,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,QAAnB,CAA7B;AACA,aAAO,YAAA;AAAM,eAAC,gBAAc,CAAC,UAAD,CAAd,GAA6B,YAAA,CAA9B,CAAA;AAAuC,OAApD;AACD,KAJD,MAIO;AACL,MAAA,QAAQ,CAAC,KAAT,CAAe,iBAAf;AACA,MAAA,QAAQ,CAAC,QAAT;AACD;AACF,GAXM,CAAP;AAYD;;AAED,OAAM,SAAU,uBAAV,CAAkC,SAAlC,EAAkD,UAAlD,EAAsE,IAAtE,EAAmG;AAA7B,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,EAAA;AAA6B;;AACvG,SAAO,gBAAgB,CAAC,SAAD,EAAY,UAAZ,CAAvB;AACD","sourcesContent":["import { Observable, Observer } from 'rxjs';\n\nimport { checkAvailability, getPlugin } from './common';\n\nfunction overrideFunction(pluginObj: any, methodName: string): Observable<any> {\n  return new Observable((observer: Observer<any>) => {\n    const availabilityCheck = checkAvailability(pluginObj, methodName);\n\n    if (availabilityCheck === true) {\n      const pluginInstance = getPlugin(pluginObj.constructor.getPluginRef());\n      pluginInstance[methodName] = observer.next.bind(observer);\n      return () => (pluginInstance[methodName] = () => {});\n    } else {\n      observer.error(availabilityCheck);\n      observer.complete();\n    }\n  });\n}\n\nexport function cordovaFunctionOverride(pluginObj: any, methodName: string, args: IArguments | any[] = []) {\n  return overrideFunction(pluginObj, methodName);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}