{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\nimport { FilesystemDirectory } from '../core-plugin-definitions';\n\nvar FilesystemPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(FilesystemPluginWeb, _super);\n\n  function FilesystemPluginWeb() {\n    var _this = _super.call(this, {\n      name: 'Filesystem',\n      platforms: ['web']\n    }) || this;\n\n    _this.DEFAULT_DIRECTORY = FilesystemDirectory.Data;\n    _this.DB_VERSION = 1;\n    _this.DB_NAME = 'Disc';\n    _this._writeCmds = ['add', 'put', 'delete'];\n    return _this;\n  }\n\n  FilesystemPluginWeb.prototype.initDb = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this._db !== undefined) {\n          return [2\n          /*return*/\n          , this._db];\n        }\n\n        if (!('indexedDB' in window)) {\n          throw new Error('This browser doesn\\'t support IndexedDB');\n        }\n\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var request = indexedDB.open(_this.DB_NAME, _this.DB_VERSION);\n          request.onupgradeneeded = FilesystemPluginWeb.doUpgrade;\n\n          request.onsuccess = function () {\n            _this._db = request.result;\n            resolve(request.result);\n          };\n\n          request.onerror = function () {\n            return reject(request.error);\n          };\n\n          request.onblocked = function () {\n            console.warn('db blocked');\n          };\n        })];\n      });\n    });\n  };\n\n  FilesystemPluginWeb.doUpgrade = function (event) {\n    var eventTarget = event.target;\n    var db = eventTarget.result;\n\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default:\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n\n        var store = db.createObjectStore('FileStorage', {\n          keyPath: 'path'\n        });\n        store.createIndex('by_folder', 'folder');\n    }\n  };\n\n  FilesystemPluginWeb.prototype.dbRequest = function (cmd, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var readFlag;\n      return __generator(this, function (_a) {\n        readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return [2\n        /*return*/\n        , this.initDb().then(function (conn) {\n          return new Promise(function (resolve, reject) {\n            var tx = conn.transaction(['FileStorage'], readFlag);\n            var store = tx.objectStore('FileStorage');\n            var req = store[cmd].apply(store, args);\n\n            req.onsuccess = function () {\n              return resolve(req.result);\n            };\n\n            req.onerror = function () {\n              return reject(req.error);\n            };\n          });\n        })];\n      });\n    });\n  };\n\n  FilesystemPluginWeb.prototype.dbIndexRequest = function (indexName, cmd, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var readFlag;\n      return __generator(this, function (_a) {\n        readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return [2\n        /*return*/\n        , this.initDb().then(function (conn) {\n          return new Promise(function (resolve, reject) {\n            var tx = conn.transaction(['FileStorage'], readFlag);\n            var store = tx.objectStore('FileStorage');\n            var index = store.index(indexName);\n            var req = index[cmd].apply(index, args);\n\n            req.onsuccess = function () {\n              return resolve(req.result);\n            };\n\n            req.onerror = function () {\n              return reject(req.error);\n            };\n          });\n        })];\n      });\n    });\n  };\n\n  FilesystemPluginWeb.prototype.getPath = function (directory, uriPath) {\n    directory = directory || this.DEFAULT_DIRECTORY;\n    var cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    var fsPath = '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  };\n\n  FilesystemPluginWeb.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var conn, tx, store;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.initDb()];\n\n          case 1:\n            conn = _a.sent();\n            tx = conn.transaction(['FileStorage'], 'readwrite');\n            store = tx.objectStore('FileStorage');\n            store.clear();\n            return [2\n            /*return*/\n            , {}];\n        }\n      });\n    });\n  };\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n\n\n  FilesystemPluginWeb.prototype.readFile = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, entry;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            entry = _a.sent();\n            if (entry === undefined) throw Error('File does not exist.');\n            return [2\n            /*return*/\n            , {\n              data: entry.content\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n\n\n  FilesystemPluginWeb.prototype.writeFile = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, data, doRecursive, occupiedEntry, encoding, parentPath, parentEntry, subDirIndex, parentArgPath, now, pathObj;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            data = options.data;\n            doRecursive = options.recursive;\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            occupiedEntry = _a.sent();\n            if (occupiedEntry && occupiedEntry.type === 'directory') throw 'The supplied path is a directory.';\n            encoding = options.encoding;\n            parentPath = path.substr(0, path.lastIndexOf('/'));\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [parentPath])];\n\n          case 2:\n            parentEntry = _a.sent();\n            if (!(parentEntry === undefined)) return [3\n            /*break*/\n            , 4];\n            subDirIndex = parentPath.indexOf('/', 1);\n            if (!(subDirIndex !== -1)) return [3\n            /*break*/\n            , 4];\n            parentArgPath = parentPath.substr(subDirIndex);\n            return [4\n            /*yield*/\n            , this.mkdir({\n              path: parentArgPath,\n              directory: options.directory,\n              recursive: doRecursive\n            })];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            now = Date.now();\n            pathObj = {\n              path: path,\n              folder: parentPath,\n              type: 'file',\n              size: data.length,\n              ctime: now,\n              mtime: now,\n              content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data\n            };\n            return [4\n            /*yield*/\n            , this.dbRequest('put', [pathObj])];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              uri: pathObj.path\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n\n\n  FilesystemPluginWeb.prototype.appendFile = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, data, parentPath, now, ctime, occupiedEntry, parentEntry, subDirIndex, parentArgPath, pathObj;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            data = options.data;\n            parentPath = path.substr(0, path.lastIndexOf('/'));\n            now = Date.now();\n            ctime = now;\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            occupiedEntry = _a.sent();\n            if (occupiedEntry && occupiedEntry.type === 'directory') throw 'The supplied path is a directory.';\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [parentPath])];\n\n          case 2:\n            parentEntry = _a.sent();\n            if (!(parentEntry === undefined)) return [3\n            /*break*/\n            , 4];\n            subDirIndex = parentPath.indexOf('/', 1);\n            if (!(subDirIndex !== -1)) return [3\n            /*break*/\n            , 4];\n            parentArgPath = parentPath.substr(subDirIndex);\n            return [4\n            /*yield*/\n            , this.mkdir({\n              path: parentArgPath,\n              directory: options.directory,\n              recursive: true\n            })];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            if (occupiedEntry !== undefined) {\n              data = occupiedEntry.content + data;\n              ctime = occupiedEntry.ctime;\n            }\n\n            pathObj = {\n              path: path,\n              folder: parentPath,\n              type: 'file',\n              size: data.length,\n              ctime: ctime,\n              mtime: now,\n              content: data\n            };\n            return [4\n            /*yield*/\n            , this.dbRequest('put', [pathObj])];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {}];\n        }\n      });\n    });\n  };\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n\n\n  FilesystemPluginWeb.prototype.deleteFile = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, entry, entries;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            entry = _a.sent();\n            if (entry === undefined) throw Error('File does not exist.');\n            return [4\n            /*yield*/\n            , this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)])];\n\n          case 2:\n            entries = _a.sent();\n            if (entries.length !== 0) throw Error('Folder is not empty.');\n            return [4\n            /*yield*/\n            , this.dbRequest('delete', [path])];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {}];\n        }\n      });\n    });\n  };\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n\n\n  FilesystemPluginWeb.prototype.mkdir = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, doRecursive, parentPath, depth, parentEntry, occupiedEntry, parentArgPath, now, pathObj;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            doRecursive = options.recursive;\n            parentPath = path.substr(0, path.lastIndexOf('/'));\n            depth = (path.match(/\\//g) || []).length;\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [parentPath])];\n\n          case 1:\n            parentEntry = _a.sent();\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 2:\n            occupiedEntry = _a.sent();\n            if (depth === 1) throw Error('Cannot create Root directory');\n            if (occupiedEntry !== undefined) throw Error('Current directory does already exist.');\n            if (!doRecursive && depth !== 2 && parentEntry === undefined) throw Error('Parent directory must exist');\n            if (!(doRecursive && depth !== 2 && parentEntry === undefined)) return [3\n            /*break*/\n            , 4];\n            parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            return [4\n            /*yield*/\n            , this.mkdir({\n              path: parentArgPath,\n              directory: options.directory,\n              recursive: doRecursive\n            })];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            now = Date.now();\n            pathObj = {\n              path: path,\n              folder: parentPath,\n              type: 'directory',\n              size: 0,\n              ctime: now,\n              mtime: now\n            };\n            return [4\n            /*yield*/\n            , this.dbRequest('put', [pathObj])];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {}];\n        }\n      });\n    });\n  };\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n\n\n  FilesystemPluginWeb.prototype.rmdir = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, directory, recursive, fullPath, entry, readDirResult, _i, _a, entry_1, entryPath, entryObj;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            path = options.path, directory = options.directory, recursive = options.recursive;\n            fullPath = this.getPath(directory, path);\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [fullPath])];\n\n          case 1:\n            entry = _b.sent();\n            if (entry === undefined) throw Error('Folder does not exist.');\n            if (entry.type !== 'directory') throw Error('Requested path is not a directory');\n            return [4\n            /*yield*/\n            , this.readdir({\n              path: path,\n              directory: directory\n            })];\n\n          case 2:\n            readDirResult = _b.sent();\n            if (readDirResult.files.length !== 0 && !recursive) throw Error('Folder is not empty');\n            _i = 0, _a = readDirResult.files;\n            _b.label = 3;\n\n          case 3:\n            if (!(_i < _a.length)) return [3\n            /*break*/\n            , 9];\n            entry_1 = _a[_i];\n            entryPath = path + \"/\" + entry_1;\n            return [4\n            /*yield*/\n            , this.stat({\n              path: entryPath,\n              directory: directory\n            })];\n\n          case 4:\n            entryObj = _b.sent();\n            if (!(entryObj.type === 'file')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.deleteFile({\n              path: entryPath,\n              directory: directory\n            })];\n\n          case 5:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , this.rmdir({\n              path: entryPath,\n              directory: directory,\n              recursive: recursive\n            })];\n\n          case 7:\n            _b.sent();\n\n            _b.label = 8;\n\n          case 8:\n            _i++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 9:\n            return [4\n            /*yield*/\n            , this.dbRequest('delete', [fullPath])];\n\n          case 10:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , {}];\n        }\n      });\n    });\n  };\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n\n\n  FilesystemPluginWeb.prototype.readdir = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, entry, entries, names;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            entry = _a.sent();\n            if (options.path !== '' && entry === undefined) throw Error('Folder does not exist.');\n            return [4\n            /*yield*/\n            , this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)])];\n\n          case 2:\n            entries = _a.sent();\n            names = entries.map(function (e) {\n              return e.substring(path.length + 1);\n            });\n            return [2\n            /*return*/\n            , {\n              files: names\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n\n\n  FilesystemPluginWeb.prototype.getUri = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, entry;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            entry = _a.sent();\n            if (!(entry === undefined)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path + '/'])];\n\n          case 2:\n            entry = _a.sent();\n            _a.label = 3;\n\n          case 3:\n            if (entry === undefined) throw Error('Entry does not exist.');\n            return [2\n            /*return*/\n            , {\n              uri: entry.path\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n\n\n  FilesystemPluginWeb.prototype.stat = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, entry;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            path = this.getPath(options.directory, options.path);\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path])];\n\n          case 1:\n            entry = _a.sent();\n            if (!(entry === undefined)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.dbRequest('get', [path + '/'])];\n\n          case 2:\n            entry = _a.sent();\n            _a.label = 3;\n\n          case 3:\n            if (entry === undefined) throw Error('Entry does not exist.');\n            return [2\n            /*return*/\n            , {\n              type: entry.type,\n              size: entry.size,\n              ctime: entry.ctime,\n              mtime: entry.mtime,\n              uri: entry.path\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n\n\n  FilesystemPluginWeb.prototype.rename = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._copy(options, true)];\n      });\n    });\n  };\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n\n\n  FilesystemPluginWeb.prototype.copy = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._copy(options, false)];\n      });\n    });\n  };\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n\n\n  FilesystemPluginWeb.prototype._copy = function (options, doRename) {\n    if (doRename === void 0) {\n      doRename = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var to, from, fromDirectory, toDirectory, fromPath, toPath, toObj, e_1, toPathComponents, toPath_1, toParentDirectory, fromObj, updateTime, _a, file, e_2, contents, _i, contents_1, filename;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            to = options.to, from = options.from, fromDirectory = options.directory, toDirectory = options.toDirectory;\n\n            if (!to || !from) {\n              throw Error('Both to and from must be provided');\n            } // If no \"to\" directory is provided, use the \"from\" directory\n\n\n            if (!toDirectory) {\n              toDirectory = fromDirectory;\n            }\n\n            fromPath = this.getPath(fromDirectory, from);\n            toPath = this.getPath(toDirectory, to); // Test that the \"to\" and \"from\" locations are different\n\n            if (fromPath === toPath) {\n              return [2\n              /*return*/\n              , {}];\n            }\n\n            if (toPath.startsWith(fromPath)) {\n              throw Error('To path cannot contain the from path');\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 6]);\n\n            return [4\n            /*yield*/\n            , this.stat({\n              path: to,\n              directory: toDirectory\n            })];\n\n          case 2:\n            toObj = _b.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 3:\n            e_1 = _b.sent();\n            toPathComponents = to.split('/');\n            toPathComponents.pop();\n            toPath_1 = toPathComponents.join('/');\n            if (!(toPathComponents.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.stat({\n              path: toPath_1,\n              directory: toDirectory\n            })];\n\n          case 4:\n            toParentDirectory = _b.sent();\n\n            if (toParentDirectory.type !== 'directory') {\n              throw new Error('Parent directory of the to path is a file');\n            }\n\n            _b.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            // Cannot overwrite a directory\n            if (toObj && toObj.type === 'directory') {\n              throw new Error('Cannot overwrite a directory with a file');\n            }\n\n            return [4\n            /*yield*/\n            , this.stat({\n              path: from,\n              directory: fromDirectory\n            })];\n\n          case 7:\n            fromObj = _b.sent();\n\n            updateTime = function updateTime(path, ctime, mtime) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var fullPath, entry;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      fullPath = this.getPath(toDirectory, path);\n                      return [4\n                      /*yield*/\n                      , this.dbRequest('get', [fullPath])];\n\n                    case 1:\n                      entry = _a.sent();\n                      entry.ctime = ctime;\n                      entry.mtime = mtime;\n                      return [4\n                      /*yield*/\n                      , this.dbRequest('put', [entry])];\n\n                    case 2:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            _a = fromObj.type;\n\n            switch (_a) {\n              case 'file':\n                return [3\n                /*break*/\n                , 8];\n\n              case 'directory':\n                return [3\n                /*break*/\n                , 15];\n            }\n\n            return [3\n            /*break*/\n            , 28];\n\n          case 8:\n            return [4\n            /*yield*/\n            , this.readFile({\n              path: from,\n              directory: fromDirectory\n            })];\n\n          case 9:\n            file = _b.sent();\n            if (!doRename) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , this.deleteFile({\n              path: from,\n              directory: fromDirectory\n            })];\n\n          case 10:\n            _b.sent();\n\n            _b.label = 11;\n\n          case 11:\n            // Write the file to the new location\n            return [4\n            /*yield*/\n            , this.writeFile({\n              path: to,\n              directory: toDirectory,\n              data: file.data\n            })];\n\n          case 12:\n            // Write the file to the new location\n            _b.sent();\n\n            if (!doRename) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , updateTime(to, fromObj.ctime, fromObj.mtime)];\n\n          case 13:\n            _b.sent();\n\n            _b.label = 14;\n\n          case 14:\n            // Resolve promise\n            return [2\n            /*return*/\n            , {}];\n\n          case 15:\n            if (toObj) {\n              throw Error('Cannot move a directory over an existing object');\n            }\n\n            _b.label = 16;\n\n          case 16:\n            _b.trys.push([16, 20,, 21]); // Create the to directory\n\n\n            return [4\n            /*yield*/\n            , this.mkdir({\n              path: to,\n              directory: toDirectory,\n              recursive: false\n            })];\n\n          case 17:\n            // Create the to directory\n            _b.sent();\n\n            if (!doRename) return [3\n            /*break*/\n            , 19];\n            return [4\n            /*yield*/\n            , updateTime(to, fromObj.ctime, fromObj.mtime)];\n\n          case 18:\n            _b.sent();\n\n            _b.label = 19;\n\n          case 19:\n            return [3\n            /*break*/\n            , 21];\n\n          case 20:\n            e_2 = _b.sent();\n            return [3\n            /*break*/\n            , 21];\n\n          case 21:\n            return [4\n            /*yield*/\n            , this.readdir({\n              path: from,\n              directory: fromDirectory\n            })];\n\n          case 22:\n            contents = _b.sent().files;\n            _i = 0, contents_1 = contents;\n            _b.label = 23;\n\n          case 23:\n            if (!(_i < contents_1.length)) return [3\n            /*break*/\n            , 26];\n            filename = contents_1[_i]; // Move item from the from directory to the to directory\n\n            return [4\n            /*yield*/\n            , this._copy({\n              from: from + \"/\" + filename,\n              to: to + \"/\" + filename,\n              directory: fromDirectory,\n              toDirectory: toDirectory\n            }, doRename)];\n\n          case 24:\n            // Move item from the from directory to the to directory\n            _b.sent();\n\n            _b.label = 25;\n\n          case 25:\n            _i++;\n            return [3\n            /*break*/\n            , 23];\n\n          case 26:\n            if (!doRename) return [3\n            /*break*/\n            , 28];\n            return [4\n            /*yield*/\n            , this.rmdir({\n              path: from,\n              directory: fromDirectory\n            })];\n\n          case 27:\n            _b.sent();\n\n            _b.label = 28;\n\n          case 28:\n            return [2\n            /*return*/\n            , {}];\n        }\n      });\n    });\n  };\n\n  FilesystemPluginWeb._debug = true;\n  return FilesystemPluginWeb;\n}(WebPlugin);\n\nexport { FilesystemPluginWeb };\nvar Filesystem = new FilesystemPluginWeb();\nexport { Filesystem };","map":{"version":3,"sources":["../../../src/web/filesystem.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\nimport { FilesystemDirectory } from '../core-plugin-definitions';\nvar FilesystemPluginWeb = /** @class */ (function (_super) {\n    __extends(FilesystemPluginWeb, _super);\n    function FilesystemPluginWeb() {\n        var _this = _super.call(this, {\n            name: 'Filesystem',\n            platforms: ['web']\n        }) || this;\n        _this.DEFAULT_DIRECTORY = FilesystemDirectory.Data;\n        _this.DB_VERSION = 1;\n        _this.DB_NAME = 'Disc';\n        _this._writeCmds = ['add', 'put', 'delete'];\n        return _this;\n    }\n    FilesystemPluginWeb.prototype.initDb = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this._db !== undefined) {\n                    return [2 /*return*/, this._db];\n                }\n                if (!('indexedDB' in window)) {\n                    throw new Error('This browser doesn\\'t support IndexedDB');\n                }\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var request = indexedDB.open(_this.DB_NAME, _this.DB_VERSION);\n                        request.onupgradeneeded = FilesystemPluginWeb.doUpgrade;\n                        request.onsuccess = function () {\n                            _this._db = request.result;\n                            resolve(request.result);\n                        };\n                        request.onerror = function () { return reject(request.error); };\n                        request.onblocked = function () {\n                            console.warn('db blocked');\n                        };\n                    })];\n            });\n        });\n    };\n    FilesystemPluginWeb.doUpgrade = function (event) {\n        var eventTarget = event.target;\n        var db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default:\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                var store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n        }\n    };\n    FilesystemPluginWeb.prototype.dbRequest = function (cmd, args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var readFlag;\n            return __generator(this, function (_a) {\n                readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n                return [2 /*return*/, this.initDb()\n                        .then(function (conn) {\n                        return new Promise(function (resolve, reject) {\n                            var tx = conn.transaction(['FileStorage'], readFlag);\n                            var store = tx.objectStore('FileStorage');\n                            var req = store[cmd].apply(store, args);\n                            req.onsuccess = function () { return resolve(req.result); };\n                            req.onerror = function () { return reject(req.error); };\n                        });\n                    })];\n            });\n        });\n    };\n    FilesystemPluginWeb.prototype.dbIndexRequest = function (indexName, cmd, args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var readFlag;\n            return __generator(this, function (_a) {\n                readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n                return [2 /*return*/, this.initDb()\n                        .then(function (conn) {\n                        return new Promise(function (resolve, reject) {\n                            var tx = conn.transaction(['FileStorage'], readFlag);\n                            var store = tx.objectStore('FileStorage');\n                            var index = store.index(indexName);\n                            var req = index[cmd].apply(index, args);\n                            req.onsuccess = function () { return resolve(req.result); };\n                            req.onerror = function () { return reject(req.error); };\n                        });\n                    })];\n            });\n        });\n    };\n    FilesystemPluginWeb.prototype.getPath = function (directory, uriPath) {\n        directory = directory || this.DEFAULT_DIRECTORY;\n        var cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        var fsPath = '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    };\n    FilesystemPluginWeb.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var conn, tx, store;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.initDb()];\n                    case 1:\n                        conn = _a.sent();\n                        tx = conn.transaction(['FileStorage'], 'readwrite');\n                        store = tx.objectStore('FileStorage');\n                        store.clear();\n                        return [2 /*return*/, {}];\n                }\n            });\n        });\n    };\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    FilesystemPluginWeb.prototype.readFile = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, entry;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        entry = _a.sent();\n                        if (entry === undefined)\n                            throw Error('File does not exist.');\n                        return [2 /*return*/, { data: entry.content }];\n                }\n            });\n        });\n    };\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    FilesystemPluginWeb.prototype.writeFile = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, data, doRecursive, occupiedEntry, encoding, parentPath, parentEntry, subDirIndex, parentArgPath, now, pathObj;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        data = options.data;\n                        doRecursive = options.recursive;\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        occupiedEntry = _a.sent();\n                        if (occupiedEntry && occupiedEntry.type === 'directory')\n                            throw ('The supplied path is a directory.');\n                        encoding = options.encoding;\n                        parentPath = path.substr(0, path.lastIndexOf('/'));\n                        return [4 /*yield*/, this.dbRequest('get', [parentPath])];\n                    case 2:\n                        parentEntry = _a.sent();\n                        if (!(parentEntry === undefined)) return [3 /*break*/, 4];\n                        subDirIndex = parentPath.indexOf('/', 1);\n                        if (!(subDirIndex !== -1)) return [3 /*break*/, 4];\n                        parentArgPath = parentPath.substr(subDirIndex);\n                        return [4 /*yield*/, this.mkdir({ path: parentArgPath, directory: options.directory, recursive: doRecursive })];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        now = Date.now();\n                        pathObj = {\n                            path: path,\n                            folder: parentPath,\n                            type: 'file',\n                            size: data.length,\n                            ctime: now,\n                            mtime: now,\n                            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n                        };\n                        return [4 /*yield*/, this.dbRequest('put', [pathObj])];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, {\n                                uri: pathObj.path\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    FilesystemPluginWeb.prototype.appendFile = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, data, parentPath, now, ctime, occupiedEntry, parentEntry, subDirIndex, parentArgPath, pathObj;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        data = options.data;\n                        parentPath = path.substr(0, path.lastIndexOf('/'));\n                        now = Date.now();\n                        ctime = now;\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        occupiedEntry = _a.sent();\n                        if (occupiedEntry && occupiedEntry.type === 'directory')\n                            throw ('The supplied path is a directory.');\n                        return [4 /*yield*/, this.dbRequest('get', [parentPath])];\n                    case 2:\n                        parentEntry = _a.sent();\n                        if (!(parentEntry === undefined)) return [3 /*break*/, 4];\n                        subDirIndex = parentPath.indexOf('/', 1);\n                        if (!(subDirIndex !== -1)) return [3 /*break*/, 4];\n                        parentArgPath = parentPath.substr(subDirIndex);\n                        return [4 /*yield*/, this.mkdir({ path: parentArgPath, directory: options.directory, recursive: true })];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        if (occupiedEntry !== undefined) {\n                            data = occupiedEntry.content + data;\n                            ctime = occupiedEntry.ctime;\n                        }\n                        pathObj = {\n                            path: path,\n                            folder: parentPath,\n                            type: 'file',\n                            size: data.length,\n                            ctime: ctime,\n                            mtime: now,\n                            content: data\n                        };\n                        return [4 /*yield*/, this.dbRequest('put', [pathObj])];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, {}];\n                }\n            });\n        });\n    };\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    FilesystemPluginWeb.prototype.deleteFile = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, entry, entries;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        entry = _a.sent();\n                        if (entry === undefined)\n                            throw Error('File does not exist.');\n                        return [4 /*yield*/, this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)])];\n                    case 2:\n                        entries = _a.sent();\n                        if (entries.length !== 0)\n                            throw Error('Folder is not empty.');\n                        return [4 /*yield*/, this.dbRequest('delete', [path])];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, {}];\n                }\n            });\n        });\n    };\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    FilesystemPluginWeb.prototype.mkdir = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, doRecursive, parentPath, depth, parentEntry, occupiedEntry, parentArgPath, now, pathObj;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        doRecursive = options.recursive;\n                        parentPath = path.substr(0, path.lastIndexOf('/'));\n                        depth = (path.match(/\\//g) || []).length;\n                        return [4 /*yield*/, this.dbRequest('get', [parentPath])];\n                    case 1:\n                        parentEntry = _a.sent();\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 2:\n                        occupiedEntry = _a.sent();\n                        if (depth === 1)\n                            throw Error('Cannot create Root directory');\n                        if (occupiedEntry !== undefined)\n                            throw Error('Current directory does already exist.');\n                        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n                            throw Error('Parent directory must exist');\n                        if (!(doRecursive && depth !== 2 && parentEntry === undefined)) return [3 /*break*/, 4];\n                        parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n                        return [4 /*yield*/, this.mkdir({\n                                path: parentArgPath,\n                                directory: options.directory,\n                                recursive: doRecursive\n                            })];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        now = Date.now();\n                        pathObj = { path: path, folder: parentPath, type: 'directory', size: 0, ctime: now, mtime: now };\n                        return [4 /*yield*/, this.dbRequest('put', [pathObj])];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, {}];\n                }\n            });\n        });\n    };\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    FilesystemPluginWeb.prototype.rmdir = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, directory, recursive, fullPath, entry, readDirResult, _i, _a, entry_1, entryPath, entryObj;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        path = options.path, directory = options.directory, recursive = options.recursive;\n                        fullPath = this.getPath(directory, path);\n                        return [4 /*yield*/, this.dbRequest('get', [fullPath])];\n                    case 1:\n                        entry = _b.sent();\n                        if (entry === undefined)\n                            throw Error('Folder does not exist.');\n                        if (entry.type !== 'directory')\n                            throw Error('Requested path is not a directory');\n                        return [4 /*yield*/, this.readdir({ path: path, directory: directory })];\n                    case 2:\n                        readDirResult = _b.sent();\n                        if (readDirResult.files.length !== 0 && !recursive)\n                            throw Error('Folder is not empty');\n                        _i = 0, _a = readDirResult.files;\n                        _b.label = 3;\n                    case 3:\n                        if (!(_i < _a.length)) return [3 /*break*/, 9];\n                        entry_1 = _a[_i];\n                        entryPath = path + \"/\" + entry_1;\n                        return [4 /*yield*/, this.stat({ path: entryPath, directory: directory })];\n                    case 4:\n                        entryObj = _b.sent();\n                        if (!(entryObj.type === 'file')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.deleteFile({ path: entryPath, directory: directory })];\n                    case 5:\n                        _b.sent();\n                        return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, this.rmdir({ path: entryPath, directory: directory, recursive: recursive })];\n                    case 7:\n                        _b.sent();\n                        _b.label = 8;\n                    case 8:\n                        _i++;\n                        return [3 /*break*/, 3];\n                    case 9: return [4 /*yield*/, this.dbRequest('delete', [fullPath])];\n                    case 10:\n                        _b.sent();\n                        return [2 /*return*/, {}];\n                }\n            });\n        });\n    };\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    FilesystemPluginWeb.prototype.readdir = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, entry, entries, names;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        entry = _a.sent();\n                        if (options.path !== '' && entry === undefined)\n                            throw Error('Folder does not exist.');\n                        return [4 /*yield*/, this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)])];\n                    case 2:\n                        entries = _a.sent();\n                        names = entries.map(function (e) {\n                            return e.substring(path.length + 1);\n                        });\n                        return [2 /*return*/, { files: names }];\n                }\n            });\n        });\n    };\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    FilesystemPluginWeb.prototype.getUri = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, entry;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        entry = _a.sent();\n                        if (!(entry === undefined)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.dbRequest('get', [path + '/'])];\n                    case 2:\n                        entry = (_a.sent());\n                        _a.label = 3;\n                    case 3:\n                        if (entry === undefined)\n                            throw Error('Entry does not exist.');\n                        return [2 /*return*/, {\n                                uri: entry.path\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    FilesystemPluginWeb.prototype.stat = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, entry;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        path = this.getPath(options.directory, options.path);\n                        return [4 /*yield*/, this.dbRequest('get', [path])];\n                    case 1:\n                        entry = _a.sent();\n                        if (!(entry === undefined)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.dbRequest('get', [path + '/'])];\n                    case 2:\n                        entry = (_a.sent());\n                        _a.label = 3;\n                    case 3:\n                        if (entry === undefined)\n                            throw Error('Entry does not exist.');\n                        return [2 /*return*/, {\n                                type: entry.type,\n                                size: entry.size,\n                                ctime: entry.ctime,\n                                mtime: entry.mtime,\n                                uri: entry.path\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    FilesystemPluginWeb.prototype.rename = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._copy(options, true)];\n            });\n        });\n    };\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    FilesystemPluginWeb.prototype.copy = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._copy(options, false)];\n            });\n        });\n    };\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    FilesystemPluginWeb.prototype._copy = function (options, doRename) {\n        if (doRename === void 0) { doRename = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var to, from, fromDirectory, toDirectory, fromPath, toPath, toObj, e_1, toPathComponents, toPath_1, toParentDirectory, fromObj, updateTime, _a, file, e_2, contents, _i, contents_1, filename;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        to = options.to, from = options.from, fromDirectory = options.directory, toDirectory = options.toDirectory;\n                        if (!to || !from) {\n                            throw Error('Both to and from must be provided');\n                        }\n                        // If no \"to\" directory is provided, use the \"from\" directory\n                        if (!toDirectory) {\n                            toDirectory = fromDirectory;\n                        }\n                        fromPath = this.getPath(fromDirectory, from);\n                        toPath = this.getPath(toDirectory, to);\n                        // Test that the \"to\" and \"from\" locations are different\n                        if (fromPath === toPath) {\n                            return [2 /*return*/, {}];\n                        }\n                        if (toPath.startsWith(fromPath)) {\n                            throw Error('To path cannot contain the from path');\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 6]);\n                        return [4 /*yield*/, this.stat({\n                                path: to,\n                                directory: toDirectory\n                            })];\n                    case 2:\n                        toObj = _b.sent();\n                        return [3 /*break*/, 6];\n                    case 3:\n                        e_1 = _b.sent();\n                        toPathComponents = to.split('/');\n                        toPathComponents.pop();\n                        toPath_1 = toPathComponents.join('/');\n                        if (!(toPathComponents.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.stat({\n                                path: toPath_1,\n                                directory: toDirectory,\n                            })];\n                    case 4:\n                        toParentDirectory = _b.sent();\n                        if (toParentDirectory.type !== 'directory') {\n                            throw new Error('Parent directory of the to path is a file');\n                        }\n                        _b.label = 5;\n                    case 5: return [3 /*break*/, 6];\n                    case 6:\n                        // Cannot overwrite a directory\n                        if (toObj && toObj.type === 'directory') {\n                            throw new Error('Cannot overwrite a directory with a file');\n                        }\n                        return [4 /*yield*/, this.stat({\n                                path: from,\n                                directory: fromDirectory,\n                            })];\n                    case 7:\n                        fromObj = _b.sent();\n                        updateTime = function (path, ctime, mtime) { return __awaiter(_this, void 0, void 0, function () {\n                            var fullPath, entry;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        fullPath = this.getPath(toDirectory, path);\n                                        return [4 /*yield*/, this.dbRequest('get', [fullPath])];\n                                    case 1:\n                                        entry = _a.sent();\n                                        entry.ctime = ctime;\n                                        entry.mtime = mtime;\n                                        return [4 /*yield*/, this.dbRequest('put', [entry])];\n                                    case 2:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); };\n                        _a = fromObj.type;\n                        switch (_a) {\n                            case 'file': return [3 /*break*/, 8];\n                            case 'directory': return [3 /*break*/, 15];\n                        }\n                        return [3 /*break*/, 28];\n                    case 8: return [4 /*yield*/, this.readFile({\n                            path: from,\n                            directory: fromDirectory\n                        })];\n                    case 9:\n                        file = _b.sent();\n                        if (!doRename) return [3 /*break*/, 11];\n                        return [4 /*yield*/, this.deleteFile({\n                                path: from,\n                                directory: fromDirectory\n                            })];\n                    case 10:\n                        _b.sent();\n                        _b.label = 11;\n                    case 11: \n                    // Write the file to the new location\n                    return [4 /*yield*/, this.writeFile({\n                            path: to,\n                            directory: toDirectory,\n                            data: file.data\n                        })];\n                    case 12:\n                        // Write the file to the new location\n                        _b.sent();\n                        if (!doRename) return [3 /*break*/, 14];\n                        return [4 /*yield*/, updateTime(to, fromObj.ctime, fromObj.mtime)];\n                    case 13:\n                        _b.sent();\n                        _b.label = 14;\n                    case 14: \n                    // Resolve promise\n                    return [2 /*return*/, {}];\n                    case 15:\n                        if (toObj) {\n                            throw Error('Cannot move a directory over an existing object');\n                        }\n                        _b.label = 16;\n                    case 16:\n                        _b.trys.push([16, 20, , 21]);\n                        // Create the to directory\n                        return [4 /*yield*/, this.mkdir({\n                                path: to,\n                                directory: toDirectory,\n                                recursive: false,\n                            })];\n                    case 17:\n                        // Create the to directory\n                        _b.sent();\n                        if (!doRename) return [3 /*break*/, 19];\n                        return [4 /*yield*/, updateTime(to, fromObj.ctime, fromObj.mtime)];\n                    case 18:\n                        _b.sent();\n                        _b.label = 19;\n                    case 19: return [3 /*break*/, 21];\n                    case 20:\n                        e_2 = _b.sent();\n                        return [3 /*break*/, 21];\n                    case 21: return [4 /*yield*/, this.readdir({\n                            path: from,\n                            directory: fromDirectory,\n                        })];\n                    case 22:\n                        contents = (_b.sent()).files;\n                        _i = 0, contents_1 = contents;\n                        _b.label = 23;\n                    case 23:\n                        if (!(_i < contents_1.length)) return [3 /*break*/, 26];\n                        filename = contents_1[_i];\n                        // Move item from the from directory to the to directory\n                        return [4 /*yield*/, this._copy({\n                                from: from + \"/\" + filename,\n                                to: to + \"/\" + filename,\n                                directory: fromDirectory,\n                                toDirectory: toDirectory,\n                            }, doRename)];\n                    case 24:\n                        // Move item from the from directory to the to directory\n                        _b.sent();\n                        _b.label = 25;\n                    case 25:\n                        _i++;\n                        return [3 /*break*/, 23];\n                    case 26:\n                        if (!doRename) return [3 /*break*/, 28];\n                        return [4 /*yield*/, this.rmdir({\n                                path: from,\n                                directory: fromDirectory\n                            })];\n                    case 27:\n                        _b.sent();\n                        _b.label = 28;\n                    case 28: return [2 /*return*/, {}];\n                }\n            });\n        });\n    };\n    FilesystemPluginWeb._debug = true;\n    return FilesystemPluginWeb;\n}(WebPlugin));\nexport { FilesystemPluginWeb };\nvar Filesystem = new FilesystemPluginWeb();\nexport { Filesystem };\n//# sourceMappingURL=filesystem.js.map"]},"metadata":{},"sourceType":"module"}