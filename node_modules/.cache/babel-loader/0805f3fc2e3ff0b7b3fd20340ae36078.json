{"ast":null,"code":"var WebPluginRegistry =\n/** @class */\nfunction () {\n  function WebPluginRegistry() {\n    this.plugins = {};\n    this.loadedPlugins = {};\n  }\n\n  WebPluginRegistry.prototype.addPlugin = function (plugin) {\n    this.plugins[plugin.config.name] = plugin;\n  };\n\n  WebPluginRegistry.prototype.getPlugin = function (name) {\n    return this.plugins[name];\n  };\n\n  WebPluginRegistry.prototype.loadPlugin = function (name) {\n    var plugin = this.getPlugin(name);\n\n    if (!plugin) {\n      console.error(\"Unable to load web plugin \" + name + \", no such plugin found.\");\n      return;\n    }\n\n    plugin.load();\n  };\n\n  WebPluginRegistry.prototype.getPlugins = function () {\n    var p = [];\n\n    for (var name_1 in this.plugins) {\n      p.push(this.plugins[name_1]);\n    }\n\n    return p;\n  };\n\n  return WebPluginRegistry;\n}();\n\nexport { WebPluginRegistry };\nvar WebPlugins = new WebPluginRegistry();\nexport { WebPlugins };\n\nvar WebPlugin =\n/** @class */\nfunction () {\n  function WebPlugin(config, pluginRegistry) {\n    this.config = config;\n    this.loaded = false;\n    this.listeners = {};\n    this.windowListeners = {};\n\n    if (!pluginRegistry) {\n      WebPlugins.addPlugin(this);\n    } else {\n      pluginRegistry.addPlugin(this);\n    }\n  }\n\n  WebPlugin.prototype.addWindowListener = function (handle) {\n    window.addEventListener(handle.windowEventName, handle.handler);\n    handle.registered = true;\n  };\n\n  WebPlugin.prototype.removeWindowListener = function (handle) {\n    if (!handle) {\n      return;\n    }\n\n    window.removeEventListener(handle.windowEventName, handle.handler);\n    handle.registered = false;\n  };\n\n  WebPlugin.prototype.addListener = function (eventName, listenerFunc) {\n    var _this = this;\n\n    var listeners = this.listeners[eventName];\n\n    if (!listeners) {\n      this.listeners[eventName] = [];\n    }\n\n    this.listeners[eventName].push(listenerFunc); // If we haven't added a window listener for this event and it requires one,\n    // go ahead and add it\n\n    var windowListener = this.windowListeners[eventName];\n\n    if (windowListener && !windowListener.registered) {\n      this.addWindowListener(windowListener);\n    }\n\n    return {\n      remove: function () {\n        _this.removeListener(eventName, listenerFunc);\n      }\n    };\n  };\n\n  WebPlugin.prototype.removeListener = function (eventName, listenerFunc) {\n    var listeners = this.listeners[eventName];\n\n    if (!listeners) {\n      return;\n    }\n\n    var index = listeners.indexOf(listenerFunc);\n    this.listeners[eventName].splice(index, 1); // If there are no more listeners for this type of event,\n    // remove the window listener\n\n    if (!this.listeners[eventName].length) {\n      this.removeWindowListener(this.windowListeners[eventName]);\n    }\n  };\n\n  WebPlugin.prototype.removeAllListeners = function () {\n    this.listeners = {};\n\n    for (var listener in this.windowListeners) {\n      this.removeWindowListener(this.windowListeners[listener]);\n    }\n\n    this.windowListeners = {};\n  };\n\n  WebPlugin.prototype.notifyListeners = function (eventName, data) {\n    var listeners = this.listeners[eventName];\n\n    if (listeners) {\n      listeners.forEach(function (listener) {\n        return listener(data);\n      });\n    }\n  };\n\n  WebPlugin.prototype.hasListeners = function (eventName) {\n    return !!this.listeners[eventName].length;\n  };\n\n  WebPlugin.prototype.registerWindowListener = function (windowEventName, pluginEventName) {\n    var _this = this;\n\n    this.windowListeners[pluginEventName] = {\n      registered: false,\n      windowEventName: windowEventName,\n      pluginEventName: pluginEventName,\n      handler: function (event) {\n        _this.notifyListeners(pluginEventName, event);\n      }\n    };\n  };\n\n  WebPlugin.prototype.requestPermissions = function () {\n    if (Capacitor.isNative) {\n      return Capacitor.nativePromise(this.config.name, 'requestPermissions', {});\n    } else {\n      return Promise.resolve({\n        results: []\n      });\n    }\n  };\n\n  WebPlugin.prototype.load = function () {\n    this.loaded = true;\n  };\n\n  return WebPlugin;\n}();\n\nexport { WebPlugin };\n\nvar shouldMergeWebPlugin = function (plugin) {\n  return plugin.config.platforms && plugin.config.platforms.indexOf(Capacitor.platform) >= 0;\n};\n/**\n * For all our known web plugins, merge them into the global plugins\n * registry if they aren't already existing. If they don't exist, that\n * means there's no existing native implementation for it.\n * @param knownPlugins the Capacitor.Plugins global registry.\n */\n\n\nexport var mergeWebPlugins = function (knownPlugins) {\n  var plugins = WebPlugins.getPlugins();\n\n  for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n    var plugin = plugins_1[_i];\n    mergeWebPlugin(knownPlugins, plugin);\n  }\n};\nexport var mergeWebPlugin = function (knownPlugins, plugin) {\n  // If we already have a plugin registered (meaning it was defined in the native layer),\n  // then we should only overwrite it if the corresponding web plugin activates on\n  // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n  if (knownPlugins.hasOwnProperty(plugin.config.name) && !shouldMergeWebPlugin(plugin)) {\n    return;\n  }\n\n  knownPlugins[plugin.config.name] = plugin;\n};","map":{"version":3,"sources":["../../../src/web/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var WebPluginRegistry = /** @class */ (function () {\n    function WebPluginRegistry() {\n        this.plugins = {};\n        this.loadedPlugins = {};\n    }\n    WebPluginRegistry.prototype.addPlugin = function (plugin) {\n        this.plugins[plugin.config.name] = plugin;\n    };\n    WebPluginRegistry.prototype.getPlugin = function (name) {\n        return this.plugins[name];\n    };\n    WebPluginRegistry.prototype.loadPlugin = function (name) {\n        var plugin = this.getPlugin(name);\n        if (!plugin) {\n            console.error(\"Unable to load web plugin \" + name + \", no such plugin found.\");\n            return;\n        }\n        plugin.load();\n    };\n    WebPluginRegistry.prototype.getPlugins = function () {\n        var p = [];\n        for (var name_1 in this.plugins) {\n            p.push(this.plugins[name_1]);\n        }\n        return p;\n    };\n    return WebPluginRegistry;\n}());\nexport { WebPluginRegistry };\nvar WebPlugins = new WebPluginRegistry();\nexport { WebPlugins };\nvar WebPlugin = /** @class */ (function () {\n    function WebPlugin(config, pluginRegistry) {\n        this.config = config;\n        this.loaded = false;\n        this.listeners = {};\n        this.windowListeners = {};\n        if (!pluginRegistry) {\n            WebPlugins.addPlugin(this);\n        }\n        else {\n            pluginRegistry.addPlugin(this);\n        }\n    }\n    WebPlugin.prototype.addWindowListener = function (handle) {\n        window.addEventListener(handle.windowEventName, handle.handler);\n        handle.registered = true;\n    };\n    WebPlugin.prototype.removeWindowListener = function (handle) {\n        if (!handle) {\n            return;\n        }\n        window.removeEventListener(handle.windowEventName, handle.handler);\n        handle.registered = false;\n    };\n    WebPlugin.prototype.addListener = function (eventName, listenerFunc) {\n        var _this = this;\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            this.listeners[eventName] = [];\n        }\n        this.listeners[eventName].push(listenerFunc);\n        // If we haven't added a window listener for this event and it requires one,\n        // go ahead and add it\n        var windowListener = this.windowListeners[eventName];\n        if (windowListener && !windowListener.registered) {\n            this.addWindowListener(windowListener);\n        }\n        return {\n            remove: function () {\n                _this.removeListener(eventName, listenerFunc);\n            }\n        };\n    };\n    WebPlugin.prototype.removeListener = function (eventName, listenerFunc) {\n        var listeners = this.listeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        var index = listeners.indexOf(listenerFunc);\n        this.listeners[eventName].splice(index, 1);\n        // If there are no more listeners for this type of event,\n        // remove the window listener\n        if (!this.listeners[eventName].length) {\n            this.removeWindowListener(this.windowListeners[eventName]);\n        }\n    };\n    WebPlugin.prototype.removeAllListeners = function () {\n        this.listeners = {};\n        for (var listener in this.windowListeners) {\n            this.removeWindowListener(this.windowListeners[listener]);\n        }\n        this.windowListeners = {};\n    };\n    WebPlugin.prototype.notifyListeners = function (eventName, data) {\n        var listeners = this.listeners[eventName];\n        if (listeners) {\n            listeners.forEach(function (listener) { return listener(data); });\n        }\n    };\n    WebPlugin.prototype.hasListeners = function (eventName) {\n        return !!this.listeners[eventName].length;\n    };\n    WebPlugin.prototype.registerWindowListener = function (windowEventName, pluginEventName) {\n        var _this = this;\n        this.windowListeners[pluginEventName] = {\n            registered: false,\n            windowEventName: windowEventName,\n            pluginEventName: pluginEventName,\n            handler: function (event) {\n                _this.notifyListeners(pluginEventName, event);\n            }\n        };\n    };\n    WebPlugin.prototype.requestPermissions = function () {\n        if (Capacitor.isNative) {\n            return Capacitor.nativePromise(this.config.name, 'requestPermissions', {});\n        }\n        else {\n            return Promise.resolve({ results: [] });\n        }\n    };\n    WebPlugin.prototype.load = function () {\n        this.loaded = true;\n    };\n    return WebPlugin;\n}());\nexport { WebPlugin };\nvar shouldMergeWebPlugin = function (plugin) {\n    return plugin.config.platforms && plugin.config.platforms.indexOf(Capacitor.platform) >= 0;\n};\n/**\n * For all our known web plugins, merge them into the global plugins\n * registry if they aren't already existing. If they don't exist, that\n * means there's no existing native implementation for it.\n * @param knownPlugins the Capacitor.Plugins global registry.\n */\nexport var mergeWebPlugins = function (knownPlugins) {\n    var plugins = WebPlugins.getPlugins();\n    for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n        var plugin = plugins_1[_i];\n        mergeWebPlugin(knownPlugins, plugin);\n    }\n};\nexport var mergeWebPlugin = function (knownPlugins, plugin) {\n    // If we already have a plugin registered (meaning it was defined in the native layer),\n    // then we should only overwrite it if the corresponding web plugin activates on\n    // a certain platform. For example: Geolocation uses the WebPlugin on Android but not iOS\n    if (knownPlugins.hasOwnProperty(plugin.config.name) && !shouldMergeWebPlugin(plugin)) {\n        return;\n    }\n    knownPlugins[plugin.config.name] = plugin;\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}