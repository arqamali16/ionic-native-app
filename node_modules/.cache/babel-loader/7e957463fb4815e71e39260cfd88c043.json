{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar ClipboardPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(ClipboardPluginWeb, _super);\n\n  function ClipboardPluginWeb() {\n    return _super.call(this, {\n      name: 'Clipboard',\n      platforms: ['web']\n    }) || this;\n  }\n\n  ClipboardPluginWeb.prototype.write = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blob, clipboardItemInput, err_1;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!(options.string !== undefined || options.url)) return [3\n            /*break*/\n            , 2];\n\n            if (!navigator.clipboard.writeText) {\n              return [2\n              /*return*/\n              , Promise.reject('Writting to clipboard not supported in this browser')];\n            }\n\n            return [4\n            /*yield*/\n            , navigator.clipboard.writeText(options.string !== undefined ? options.string : options.url)];\n\n          case 1:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 2:\n            if (!options.image) return [3\n            /*break*/\n            , 9];\n\n            if (!navigator.clipboard.write) {\n              return [2\n              /*return*/\n              , Promise.reject('Setting images not supported in this browser')];\n            }\n\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , fetch(options.image)];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _b.sent().blob()];\n\n          case 5:\n            blob = _b.sent();\n            clipboardItemInput = new ClipboardItem((_a = {}, _a[blob.type] = blob, _a));\n            return [4\n            /*yield*/\n            , navigator.clipboard.write([clipboardItemInput])];\n\n          case 6:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            err_1 = _b.sent();\n            return [2\n            /*return*/\n            , Promise.reject('Failed to write image')];\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            return [2\n            /*return*/\n            , Promise.reject('Nothing to write')];\n\n          case 10:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.read = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var clipboardItems, type, clipboardBlob, data, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!!navigator.clipboard.read) return [3\n            /*break*/\n            , 1];\n\n            if (!navigator.clipboard.readText) {\n              return [2\n              /*return*/\n              , Promise.reject('Reading from clipboard not supported in this browser')];\n            }\n\n            return [2\n            /*return*/\n            , this.readText()];\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , navigator.clipboard.read()];\n\n          case 2:\n            clipboardItems = _a.sent();\n            type = clipboardItems[0].types[0];\n            return [4\n            /*yield*/\n            , clipboardItems[0].getType(type)];\n\n          case 3:\n            clipboardBlob = _a.sent();\n            return [4\n            /*yield*/\n            , this._getBlobData(clipboardBlob, type)];\n\n          case 4:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              value: data,\n              type: type\n            })];\n\n          case 5:\n            err_2 = _a.sent();\n            return [2\n            /*return*/\n            , this.readText()];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.readText = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var text;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , navigator.clipboard.readText()];\n\n          case 1:\n            text = _a.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              value: text,\n              type: 'text/plain'\n            })];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype._getBlobData = function (clipboardBlob, type) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n\n      if (type.includes('image')) {\n        reader.readAsDataURL(clipboardBlob);\n      } else {\n        reader.readAsText(clipboardBlob);\n      }\n\n      reader.onloadend = function () {\n        var r = reader.result;\n        resolve(r);\n      };\n\n      reader.onerror = function (e) {\n        reject(e);\n      };\n    });\n  };\n\n  return ClipboardPluginWeb;\n}(WebPlugin);\n\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };","map":{"version":3,"sources":["../../../src/web/clipboard.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebPlugin } from './index';\nvar ClipboardPluginWeb = /** @class */ (function (_super) {\n    __extends(ClipboardPluginWeb, _super);\n    function ClipboardPluginWeb() {\n        return _super.call(this, {\n            name: 'Clipboard',\n            platforms: ['web']\n        }) || this;\n    }\n    ClipboardPluginWeb.prototype.write = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blob, clipboardItemInput, err_1;\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!navigator.clipboard) {\n                            return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n                        }\n                        if (!(options.string !== undefined || options.url)) return [3 /*break*/, 2];\n                        if (!navigator.clipboard.writeText) {\n                            return [2 /*return*/, Promise.reject('Writting to clipboard not supported in this browser')];\n                        }\n                        return [4 /*yield*/, navigator.clipboard.writeText(options.string !== undefined ? options.string : options.url)];\n                    case 1:\n                        _b.sent();\n                        return [3 /*break*/, 10];\n                    case 2:\n                        if (!options.image) return [3 /*break*/, 9];\n                        if (!navigator.clipboard.write) {\n                            return [2 /*return*/, Promise.reject('Setting images not supported in this browser')];\n                        }\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 7, , 8]);\n                        return [4 /*yield*/, fetch(options.image)];\n                    case 4: return [4 /*yield*/, (_b.sent()).blob()];\n                    case 5:\n                        blob = _b.sent();\n                        clipboardItemInput = new ClipboardItem((_a = {}, _a[blob.type] = blob, _a));\n                        return [4 /*yield*/, navigator.clipboard.write([clipboardItemInput])];\n                    case 6:\n                        _b.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        err_1 = _b.sent();\n                        return [2 /*return*/, Promise.reject('Failed to write image')];\n                    case 8: return [3 /*break*/, 10];\n                    case 9: return [2 /*return*/, Promise.reject('Nothing to write')];\n                    case 10: return [2 /*return*/, Promise.resolve()];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype.read = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var clipboardItems, type, clipboardBlob, data, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!navigator.clipboard) {\n                            return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n                        }\n                        if (!!navigator.clipboard.read) return [3 /*break*/, 1];\n                        if (!navigator.clipboard.readText) {\n                            return [2 /*return*/, Promise.reject('Reading from clipboard not supported in this browser')];\n                        }\n                        return [2 /*return*/, this.readText()];\n                    case 1:\n                        _a.trys.push([1, 5, , 6]);\n                        return [4 /*yield*/, navigator.clipboard.read()];\n                    case 2:\n                        clipboardItems = _a.sent();\n                        type = clipboardItems[0].types[0];\n                        return [4 /*yield*/, clipboardItems[0].getType(type)];\n                    case 3:\n                        clipboardBlob = _a.sent();\n                        return [4 /*yield*/, this._getBlobData(clipboardBlob, type)];\n                    case 4:\n                        data = _a.sent();\n                        return [2 /*return*/, Promise.resolve({ value: data, type: type })];\n                    case 5:\n                        err_2 = _a.sent();\n                        return [2 /*return*/, this.readText()];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype.readText = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var text;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, navigator.clipboard.readText()];\n                    case 1:\n                        text = _a.sent();\n                        return [2 /*return*/, Promise.resolve({ value: text, type: 'text/plain' })];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype._getBlobData = function (clipboardBlob, type) {\n        return new Promise(function (resolve, reject) {\n            var reader = new FileReader();\n            if (type.includes('image')) {\n                reader.readAsDataURL(clipboardBlob);\n            }\n            else {\n                reader.readAsText(clipboardBlob);\n            }\n            reader.onloadend = function () {\n                var r = reader.result;\n                resolve(r);\n            };\n            reader.onerror = function (e) {\n                reject(e);\n            };\n        });\n    };\n    return ClipboardPluginWeb;\n}(WebPlugin));\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };\n//# sourceMappingURL=clipboard.js.map"]},"metadata":{},"sourceType":"module"}