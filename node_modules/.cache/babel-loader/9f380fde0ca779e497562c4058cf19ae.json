{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar NetworkPluginWeb =\n/** @class */\nfunction (_super) {\n  __extends(NetworkPluginWeb, _super);\n\n  function NetworkPluginWeb() {\n    var _this = _super.call(this, {\n      name: 'Network',\n      platforms: ['web']\n    }) || this;\n\n    _this.listenerFunction = null;\n    return _this;\n  }\n\n  NetworkPluginWeb.prototype.getStatus = function () {\n    return new Promise(function (resolve, reject) {\n      if (!window.navigator) {\n        reject('Network info not available');\n        return;\n      }\n\n      var connected = window.navigator.onLine;\n      var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n      var connectionType = connection ? connection.type || connection.effectiveType : 'wifi';\n      resolve({\n        connected: connected,\n        connectionType: connected ? connectionType : 'none'\n      });\n    });\n  };\n\n  NetworkPluginWeb.prototype.addListener = function (eventName, listenerFunc) {\n    var thisRef = this;\n    var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n    var connectionType = connection ? connection.type || connection.effectiveType : 'wifi';\n    var onlineBindFunc = listenerFunc.bind(thisRef, {\n      connected: true,\n      connectionType: connectionType\n    });\n    var offlineBindFunc = listenerFunc.bind(thisRef, {\n      connected: false,\n      connectionType: 'none'\n    });\n\n    if (eventName.localeCompare('networkStatusChange') === 0) {\n      window.addEventListener('online', onlineBindFunc);\n      window.addEventListener('offline', offlineBindFunc);\n      return {\n        remove: function remove() {\n          window.removeEventListener('online', onlineBindFunc);\n          window.removeEventListener('offline', offlineBindFunc);\n        }\n      };\n    }\n  };\n\n  return NetworkPluginWeb;\n}(WebPlugin);\n\nexport { NetworkPluginWeb };\nvar Network = new NetworkPluginWeb();\nexport { Network };","map":{"version":3,"sources":["../../../src/web/network.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,SAA1B;;AASA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAIpC,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,IAAI,EAAE,SADF;AAEJ,MAAA,SAAS,EAAE,CAAC,KAAD;AAFP,KAAN,KAGE,IAJJ;;AAFA,IAAA,KAAA,CAAA,gBAAA,GAAwB,IAAxB;;AAOC;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACjC,UAAI,CAAC,MAAM,CAAC,SAAZ,EAAuB;AACrB,QAAA,MAAM,CAAC,4BAAD,CAAN;AACA;AACD;;AAED,UAAI,SAAS,GAAG,MAAM,CAAC,SAAP,CAAiB,MAAjC;AACA,UAAI,UAAU,GAAG,MAAM,CAAC,SAAP,CAAiB,UAAjB,IAA+B,MAAM,CAAC,SAAP,CAAiB,aAAhD,IAAiE,MAAM,CAAC,SAAP,CAAiB,gBAAnG;AACA,UAAI,cAAc,GAAG,UAAU,GAAI,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,aAAlC,GAAmD,MAAlF;AAEA,MAAA,OAAO,CAAC;AACN,QAAA,SAAS,EAAE,SADL;AAEN,QAAA,cAAc,EAAE,SAAS,GAAG,cAAH,GAAoB;AAFvC,OAAD,CAAP;AAID,KAdM,CAAP;AAeD,GAhBD;;AAkBA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,SAAZ,EAA8C,YAA9C,EAA2F;AACzF,QAAI,OAAO,GAAG,IAAd;AACA,QAAI,UAAU,GAAG,MAAM,CAAC,SAAP,CAAiB,UAAjB,IAA+B,MAAM,CAAC,SAAP,CAAiB,aAAhD,IAAiE,MAAM,CAAC,SAAP,CAAiB,gBAAnG;AACA,QAAI,cAAc,GAAG,UAAU,GAAI,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,aAAlC,GAAmD,MAAlF;AAEA,QAAI,cAAc,GAAG,YAAY,CAAC,IAAb,CAAkB,OAAlB,EAA2B;AAAE,MAAA,SAAS,EAAE,IAAb;AAAmB,MAAA,cAAc,EAAE;AAAnC,KAA3B,CAArB;AACA,QAAI,eAAe,GAAG,YAAY,CAAC,IAAb,CAAkB,OAAlB,EAA2B;AAAE,MAAA,SAAS,EAAE,KAAb;AAAoB,MAAA,cAAc,EAAE;AAApC,KAA3B,CAAtB;;AAEA,QAAI,SAAS,CAAC,aAAV,CAAwB,qBAAxB,MAAmD,CAAvD,EAA0D;AACxD,MAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,cAAlC;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,eAAnC;AACA,aAAO;AACL,QAAA,MAAM,EAAE,kBAAA;AACN,UAAA,MAAM,CAAC,mBAAP,CAA2B,QAA3B,EAAqC,cAArC;AACA,UAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,eAAtC;AACD;AAJI,OAAP;AAMD;AACF,GAlBD;;AAmBF,SAAA,gBAAA;AAAC,CAhDD,CAAsC,SAAtC,CAAA;;;AAkDA,IAAM,OAAO,GAAG,IAAI,gBAAJ,EAAhB;AAEA,SAAS,OAAT","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { WebPlugin } from './index';\nvar NetworkPluginWeb = /** @class */ (function (_super) {\n    __extends(NetworkPluginWeb, _super);\n    function NetworkPluginWeb() {\n        var _this = _super.call(this, {\n            name: 'Network',\n            platforms: ['web']\n        }) || this;\n        _this.listenerFunction = null;\n        return _this;\n    }\n    NetworkPluginWeb.prototype.getStatus = function () {\n        return new Promise(function (resolve, reject) {\n            if (!window.navigator) {\n                reject('Network info not available');\n                return;\n            }\n            var connected = window.navigator.onLine;\n            var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n            var connectionType = connection ? (connection.type || connection.effectiveType) : 'wifi';\n            resolve({\n                connected: connected,\n                connectionType: connected ? connectionType : 'none'\n            });\n        });\n    };\n    NetworkPluginWeb.prototype.addListener = function (eventName, listenerFunc) {\n        var thisRef = this;\n        var connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\n        var connectionType = connection ? (connection.type || connection.effectiveType) : 'wifi';\n        var onlineBindFunc = listenerFunc.bind(thisRef, { connected: true, connectionType: connectionType });\n        var offlineBindFunc = listenerFunc.bind(thisRef, { connected: false, connectionType: 'none' });\n        if (eventName.localeCompare('networkStatusChange') === 0) {\n            window.addEventListener('online', onlineBindFunc);\n            window.addEventListener('offline', offlineBindFunc);\n            return {\n                remove: function () {\n                    window.removeEventListener('online', onlineBindFunc);\n                    window.removeEventListener('offline', offlineBindFunc);\n                }\n            };\n        }\n    };\n    return NetworkPluginWeb;\n}(WebPlugin));\nexport { NetworkPluginWeb };\nvar Network = new NetworkPluginWeb();\nexport { Network };\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"module"}