{"ast":null,"code":"var CapacitorWeb =\n/** @class */\nfunction () {\n  function CapacitorWeb() {\n    var _this = this;\n\n    this.platform = 'web';\n    this.isNative = false; // Need to assign here to avoid having to define every plugin but still\n    // get the typed benefits of the provided plugins in PluginRegistry\n\n    this.Plugins = {}; // Gracefully degrade in non-Proxy supporting engines, e.g. IE11. This\n    // effectively means that trying to access an unavailable plugin will\n    // locally throw, but this is still better than throwing a syntax error.\n\n    if (typeof Proxy !== 'undefined') {\n      // Build a proxy for the Plugins object that returns the \"Noop Plugin\"\n      // if a plugin isn't available\n      this.Plugins = new Proxy(this.Plugins, {\n        get: function get(target, prop) {\n          if (typeof target[prop] === 'undefined') {\n            var thisRef_1 = _this;\n            return new Proxy({}, {\n              get: function get(_target, _prop) {\n                if (typeof _target[_prop] === 'undefined') {\n                  return thisRef_1.pluginMethodNoop.bind(thisRef_1, _target, _prop, prop);\n                } else {\n                  return _target[_prop];\n                }\n              }\n            });\n          } else {\n            return target[prop];\n          }\n        }\n      });\n    }\n  }\n\n  CapacitorWeb.prototype.pluginMethodNoop = function (_target, _prop, pluginName) {\n    return Promise.reject(pluginName + \" does not have web implementation.\");\n  };\n\n  CapacitorWeb.prototype.getPlatform = function () {\n    return this.platform;\n  };\n\n  CapacitorWeb.prototype.isPluginAvailable = function (name) {\n    return this.Plugins.hasOwnProperty(name);\n  };\n\n  CapacitorWeb.prototype.convertFileSrc = function (filePath) {\n    return filePath;\n  };\n\n  CapacitorWeb.prototype.handleError = function (e) {\n    console.error(e);\n  };\n\n  return CapacitorWeb;\n}();\n\nexport { CapacitorWeb };","map":{"version":3,"sources":["../../src/web-runtime.ts"],"names":[],"mappings":"AAEA,IAAA,YAAA;AAAA;AAAA,YAAA;AAKE,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAHA,SAAA,QAAA,GAAW,KAAX;AACA,SAAA,QAAA,GAAW,KAAX,CAEA,CACE;AACA;;AACA,SAAK,OAAL,GAAe,EAAf,CAHF,CAKE;AACA;AACA;;AACA,QAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACA;AACA,WAAK,OAAL,GAAe,IAAI,KAAJ,CAAe,KAAK,OAApB,EAA6B;AAC1C,QAAA,GAAG,EAAE,aAAC,MAAD,EAAS,IAAT,EAAa;AAChB,cAAI,OAAO,MAAM,CAAC,IAAD,CAAb,KAAwB,WAA5B,EAAyC;AACvC,gBAAI,SAAO,GAAG,KAAd;AACA,mBAAO,IAAI,KAAJ,CAAe,EAAf,EAAmB;AACxB,cAAA,GAAG,EAAE,aAAC,OAAD,EAAU,KAAV,EAAe;AAClB,oBAAI,OAAO,OAAO,CAAC,KAAD,CAAd,KAA0B,WAA9B,EAA2C;AACzC,yBAAO,SAAO,CAAC,gBAAR,CAAyB,IAAzB,CAA8B,SAA9B,EAAuC,OAAvC,EAAgD,KAAhD,EAAwD,IAAxD,CAAP;AACD,iBAFD,MAEO;AACL,yBAAO,OAAO,CAAC,KAAD,CAAd;AACD;AACF;AAPuB,aAAnB,CAAP;AASD,WAXD,MAWO;AACL,mBAAO,MAAM,CAAC,IAAD,CAAb;AACD;AACF;AAhByC,OAA7B,CAAf;AAkBD;AACF;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,OAAjB,EAA+B,KAA/B,EAAmD,UAAnD,EAAqE;AACnE,WAAO,OAAO,CAAC,MAAR,CAAkB,UAAU,GAAA,oCAA5B,CAAP;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAZ;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,IAAlB,EAA8B;AAC5B,WAAO,KAAK,OAAL,CAAa,cAAb,CAA4B,IAA5B,CAAP;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,QAAf,EAA+B;AAC7B,WAAO,QAAP;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,CAAZ,EAAoB;AAClB,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACD,GAFD;;AAGF,SAAA,YAAA;AAAC,CAxDD,EAAA","sourceRoot":"","sourcesContent":["var CapacitorWeb = /** @class */ (function () {\n    function CapacitorWeb() {\n        var _this = this;\n        this.platform = 'web';\n        this.isNative = false;\n        // Need to assign here to avoid having to define every plugin but still\n        // get the typed benefits of the provided plugins in PluginRegistry\n        this.Plugins = {};\n        // Gracefully degrade in non-Proxy supporting engines, e.g. IE11. This\n        // effectively means that trying to access an unavailable plugin will\n        // locally throw, but this is still better than throwing a syntax error.\n        if (typeof Proxy !== 'undefined') {\n            // Build a proxy for the Plugins object that returns the \"Noop Plugin\"\n            // if a plugin isn't available\n            this.Plugins = new Proxy(this.Plugins, {\n                get: function (target, prop) {\n                    if (typeof target[prop] === 'undefined') {\n                        var thisRef_1 = _this;\n                        return new Proxy({}, {\n                            get: function (_target, _prop) {\n                                if (typeof _target[_prop] === 'undefined') {\n                                    return thisRef_1.pluginMethodNoop.bind(thisRef_1, _target, _prop, prop);\n                                }\n                                else {\n                                    return _target[_prop];\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        return target[prop];\n                    }\n                }\n            });\n        }\n    }\n    CapacitorWeb.prototype.pluginMethodNoop = function (_target, _prop, pluginName) {\n        return Promise.reject(pluginName + \" does not have web implementation.\");\n    };\n    CapacitorWeb.prototype.getPlatform = function () {\n        return this.platform;\n    };\n    CapacitorWeb.prototype.isPluginAvailable = function (name) {\n        return this.Plugins.hasOwnProperty(name);\n    };\n    CapacitorWeb.prototype.convertFileSrc = function (filePath) {\n        return filePath;\n    };\n    CapacitorWeb.prototype.handleError = function (e) {\n        console.error(e);\n    };\n    return CapacitorWeb;\n}());\nexport { CapacitorWeb };\n//# sourceMappingURL=web-runtime.js.map"]},"metadata":{},"sourceType":"module"}