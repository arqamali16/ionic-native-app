{"ast":null,"code":"/**\n * @private\n */\nexport var get = function (element, path) {\n  var paths = path.split('.');\n  var obj = element;\n\n  for (var i = 0; i < paths.length; i++) {\n    if (!obj) {\n      return null;\n    }\n\n    obj = obj[paths[i]];\n  }\n\n  return obj;\n};\n/**\n * @private\n */\n\nexport var getPromise = function (callback) {\n  var tryNativePromise = function () {\n    if (window.Promise) {\n      return new Promise(function (resolve, reject) {\n        callback(resolve, reject);\n      });\n    } else {\n      console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.');\n    }\n  };\n\n  return tryNativePromise();\n};\n/**\n * @private\n * @param pluginRef\n * @returns {null|*}\n */\n\nexport var getPlugin = function (pluginRef) {\n  return get(window, pluginRef);\n};\n/**\n * @private\n */\n\nexport var pluginWarn = function (pluginName, plugin, method) {\n  if (method) {\n    console.warn('Ionic Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.');\n  } else {\n    console.warn(\"'Ionic Native: tried accessing the \" + pluginName + \" plugin but it's not installed.\");\n  }\n\n  if (plugin) {\n    console.warn(\"Install the \" + pluginName + \" plugin: 'ionic cordova plugin add \" + plugin + \"'\");\n  }\n};\n/**\n * @private\n * @param pluginName\n * @param method\n */\n\nexport var cordovaWarn = function (pluginName, method) {\n  if (method) {\n    console.warn('Ionic Native: tried calling ' + pluginName + '.' + method + ', but Cordova is not available. Make sure to a) run in a real device or simulator and b) include cordova.js in your index.html');\n  } else {\n    console.warn('Native: tried accessing the ' + pluginName + ' plugin but Cordova is not available. Make sure to a) run in a real device or simulator and b) include cordova.js in your index.html');\n  }\n};","map":{"version":3,"sources":["../../../src/@ionic-native/core/util.ts"],"names":[],"mappings":";;;AAKA,OAAO,IAAM,GAAG,GAAG,UAAC,OAAD,EAA4B,IAA5B,EAAwC;AACzD,MAAM,KAAK,GAAa,IAAI,CAAC,KAAL,CAAW,GAAX,CAAxB;AACA,MAAI,GAAG,GAAQ,OAAf;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,QAAI,CAAC,GAAL,EAAU;AACR,aAAO,IAAP;AACD;;AACD,IAAA,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAD,CAAN,CAAT;AACD;;AACD,SAAO,GAAP;AACD,CAVM;;;;;AAeP,OAAO,IAAM,UAAU,GAAG,UAAC,QAAD,EAAmB;AAC3C,MAAM,gBAAgB,GAAG,YAAA;AACvB,QAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACjC,QAAA,QAAQ,CAAC,OAAD,EAAU,MAAV,CAAR;AACD,OAFM,CAAP;AAGD,KAJD,MAIO;AACL,MAAA,OAAO,CAAC,KAAR,CACE,0LADF;AAGD;AACF,GAVD;;AAYA,SAAO,gBAAgB,EAAvB;AACD,CAdM;;;;;;;AAqBP,OAAO,IAAM,SAAS,GAAG,UAAC,SAAD,EAAkB;AACzC,SAAO,GAAG,CAAC,MAAD,EAAS,SAAT,CAAV;AACD,CAFM;;;;;AAOP,OAAO,IAAM,UAAU,GAAG,UACxB,UADwB,EAExB,MAFwB,EAGxB,MAHwB,EAGT;AAEf,MAAI,MAAJ,EAAY;AACV,IAAA,OAAO,CAAC,IAAR,CACE,iCACE,UADF,GAEE,GAFF,GAGE,MAHF,GAIE,YAJF,GAKE,UALF,GAME,2BAPJ;AASD,GAVD,MAUO;AACL,IAAA,OAAO,CAAC,IAAR,CACE,wCAAsC,UAAtC,GAAgD,iCADlD;AAGD;;AACD,MAAI,MAAJ,EAAY;AACV,IAAA,OAAO,CAAC,IAAR,CACE,iBAAe,UAAf,GAAyB,qCAAzB,GAA+D,MAA/D,GAAqE,GADvE;AAGD;AACF,CAzBM;;;;;;;AAgCP,OAAO,IAAM,WAAW,GAAG,UAAC,UAAD,EAAqB,MAArB,EAAoC;AAC7D,MAAI,MAAJ,EAAY;AACV,IAAA,OAAO,CAAC,IAAR,CACE,iCACE,UADF,GAEE,GAFF,GAGE,MAHF,GAIE,gIALJ;AAOD,GARD,MAQO;AACL,IAAA,OAAO,CAAC,IAAR,CACE,iCACE,UADF,GAEE,sIAHJ;AAKD;AACF,CAhBM","sourcesContent":["declare const window: any;\n\n/**\n * @private\n */\nexport const get = (element: Element | Window, path: string): any => {\n  const paths: string[] = path.split('.');\n  let obj: any = element;\n  for (let i = 0; i < paths.length; i++) {\n    if (!obj) {\n      return null;\n    }\n    obj = obj[paths[i]];\n  }\n  return obj;\n};\n\n/**\n * @private\n */\nexport const getPromise = (callback: Function): Promise<any> => {\n  const tryNativePromise = () => {\n    if (window.Promise) {\n      return new Promise((resolve, reject) => {\n        callback(resolve, reject);\n      });\n    } else {\n      console.error(\n        'No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.'\n      );\n    }\n  };\n\n  return tryNativePromise();\n};\n\n/**\n * @private\n * @param pluginRef\n * @returns {null|*}\n */\nexport const getPlugin = (pluginRef: string): any => {\n  return get(window, pluginRef);\n};\n\n/**\n * @private\n */\nexport const pluginWarn = (\n  pluginName: string,\n  plugin?: string,\n  method?: string\n): void => {\n  if (method) {\n    console.warn(\n      'Ionic Native: tried calling ' +\n        pluginName +\n        '.' +\n        method +\n        ', but the ' +\n        pluginName +\n        ' plugin is not installed.'\n    );\n  } else {\n    console.warn(\n      `'Ionic Native: tried accessing the ${pluginName} plugin but it's not installed.`\n    );\n  }\n  if (plugin) {\n    console.warn(\n      `Install the ${pluginName} plugin: 'ionic cordova plugin add ${plugin}'`\n    );\n  }\n};\n\n/**\n * @private\n * @param pluginName\n * @param method\n */\nexport const cordovaWarn = (pluginName: string, method?: string): void => {\n  if (method) {\n    console.warn(\n      'Ionic Native: tried calling ' +\n        pluginName +\n        '.' +\n        method +\n        ', but Cordova is not available. Make sure to a) run in a real device or simulator and b) include cordova.js in your index.html'\n    );\n  } else {\n    console.warn(\n      'Native: tried accessing the ' +\n        pluginName +\n        ' plugin but Cordova is not available. Make sure to a) run in a real device or simulator and b) include cordova.js in your index.html'\n    );\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}