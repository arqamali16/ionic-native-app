{"ast":null,"code":"import { checkAvailability } from './decorators/common';\nimport { get } from './util';\n\nvar IonicNativePlugin =\n/** @class */\nfunction () {\n  function IonicNativePlugin() {}\n  /**\n   * Returns a boolean that indicates whether the plugin is installed\n   * @return {boolean}\n   */\n\n\n  IonicNativePlugin.installed = function () {\n    var isAvailable = checkAvailability(this.pluginRef) === true;\n    return isAvailable;\n  };\n  /**\n   * Returns the original plugin object\n   */\n\n\n  IonicNativePlugin.getPlugin = function () {\n    if (typeof window !== 'undefined') {\n      return get(window, this.pluginRef);\n    }\n\n    return null;\n  };\n  /**\n   * Returns the plugin's name\n   */\n\n\n  IonicNativePlugin.getPluginName = function () {\n    var pluginName = this.pluginName;\n    return pluginName;\n  };\n  /**\n   * Returns the plugin's reference\n   */\n\n\n  IonicNativePlugin.getPluginRef = function () {\n    var pluginRef = this.pluginRef;\n    return pluginRef;\n  };\n  /**\n   * Returns the plugin's install name\n   */\n\n\n  IonicNativePlugin.getPluginInstallName = function () {\n    var plugin = this.plugin;\n    return plugin;\n  };\n  /**\n   * Returns the plugin's supported platforms\n   */\n\n\n  IonicNativePlugin.getSupportedPlatforms = function () {\n    var platform = this.platforms;\n    return platform;\n  };\n\n  IonicNativePlugin.pluginName = '';\n  IonicNativePlugin.pluginRef = '';\n  IonicNativePlugin.plugin = '';\n  IonicNativePlugin.repo = '';\n  IonicNativePlugin.platforms = [];\n  IonicNativePlugin.install = '';\n  return IonicNativePlugin;\n}();\n\nexport { IonicNativePlugin };","map":{"version":3,"sources":["../../../src/@ionic-native/core/ionic-native-plugin.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,GAAT,QAAoB,QAApB;;AAEA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CA0DC;AAlDC;;;AAGG;;;AACI,EAAA,iBAAA,CAAA,SAAA,GAAP,YAAA;AACE,QAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,SAAN,CAAjB,KAAsC,IAA1D;AACA,WAAO,WAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,iBAAA,CAAA,SAAA,GAAP,YAAA;AACE,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,aAAO,GAAG,CAAC,MAAD,EAAS,KAAK,SAAd,CAAV;AACD;;AACD,WAAO,IAAP;AACD,GALM;AAOP;;AAEG;;;AACI,EAAA,iBAAA,CAAA,aAAA,GAAP,YAAA;AACE,QAAM,UAAU,GAAG,KAAK,UAAxB;AACA,WAAO,UAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,iBAAA,CAAA,YAAA,GAAP,YAAA;AACE,QAAM,SAAS,GAAG,KAAK,SAAvB;AACA,WAAO,SAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,iBAAA,CAAA,oBAAA,GAAP,YAAA;AACE,QAAM,MAAM,GAAG,KAAK,MAApB;AACA,WAAO,MAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,iBAAA,CAAA,qBAAA,GAAP,YAAA;AACE,QAAM,QAAQ,GAAG,KAAK,SAAtB;AACA,WAAO,QAAP;AACD,GAHM;;AArDA,EAAA,iBAAA,CAAA,UAAA,GAAa,EAAb;AACA,EAAA,iBAAA,CAAA,SAAA,GAAY,EAAZ;AACA,EAAA,iBAAA,CAAA,MAAA,GAAS,EAAT;AACA,EAAA,iBAAA,CAAA,IAAA,GAAO,EAAP;AACA,EAAA,iBAAA,CAAA,SAAA,GAAsB,EAAtB;AACA,EAAA,iBAAA,CAAA,OAAA,GAAU,EAAV;AAoDT,SAAA,iBAAA;AAAC,CA1DD,EAAA;;SAAa,iB","sourcesContent":["import { checkAvailability } from './decorators/common';\nimport { get } from './util';\n\nexport class IonicNativePlugin {\n  static pluginName = '';\n  static pluginRef = '';\n  static plugin = '';\n  static repo = '';\n  static platforms: string[] = [];\n  static install = '';\n\n  /**\n   * Returns a boolean that indicates whether the plugin is installed\n   * @return {boolean}\n   */\n  static installed(): boolean {\n    const isAvailable = checkAvailability(this.pluginRef) === true;\n    return isAvailable;\n  }\n\n  /**\n   * Returns the original plugin object\n   */\n  static getPlugin(): any {\n    if (typeof window !== 'undefined') {\n      return get(window, this.pluginRef);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the plugin's name\n   */\n  static getPluginName(): string {\n    const pluginName = this.pluginName;\n    return pluginName;\n  }\n\n  /**\n   * Returns the plugin's reference\n   */\n  static getPluginRef(): string {\n    const pluginRef = this.pluginRef;\n    return pluginRef;\n  }\n\n  /**\n   * Returns the plugin's install name\n   */\n  static getPluginInstallName(): string {\n    const plugin = this.plugin;\n    return plugin;\n  }\n\n  /**\n   * Returns the plugin's supported platforms\n   */\n  static getSupportedPlatforms(): string[] {\n    const platform = this.platforms;\n    return platform;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}