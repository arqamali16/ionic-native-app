{"ast":null,"code":"import { Observable } from 'rxjs/Observable';\nimport { _throw } from 'rxjs/observable/throw';\nimport { checkAvailability, instanceAvailability, overrideFunction, wrap, wrapInstance } from './plugin';\nimport { getPlugin, getPromise } from './util';\n/**\n * @private\n */\n\nexport function InstanceCheck(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return function (pluginObj, methodName, descriptor) {\n    return {\n      value: function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (instanceAvailability(this)) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return;\n          } else if (opts.observable) {\n            return new Observable(function () {});\n          }\n\n          return getPromise(function () {});\n        }\n      },\n      enumerable: true\n    };\n  };\n}\n/**\n * Executes function only if plugin is available\n * @private\n */\n\nexport function CordovaCheck(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return function (pluginObj, methodName, descriptor) {\n    return {\n      value: function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var check = checkAvailability(pluginObj);\n\n        if (check === true) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return null;\n          } else if (opts.observable) {\n            return _throw(new Error(check && check.error));\n          }\n\n          return Promise.reject(check && check.error);\n        }\n      },\n      enumerable: true\n    };\n  };\n}\n/**\n * @private\n *\n * Class decorator specifying Plugin metadata. Required for all plugins.\n *\n * @usage\n * ```typescript\n * @Plugin({\n *  pluginName: 'MyPlugin',\n *  plugin: 'cordova-plugin-myplugin',\n *  pluginRef: 'window.myplugin'\n *  })\n *  export class MyPlugin {\n *\n *    // Plugin wrappers, properties, and functions go here ...\n *\n *  }\n * ```\n */\n\nexport function Plugin(config) {\n  return function (cls) {\n    // Add these fields to the class\n    for (var prop in config) {\n      cls[prop] = config[prop];\n    }\n\n    cls['installed'] = function (printWarning) {\n      return !!getPlugin(config.pluginRef);\n    };\n\n    cls['getPlugin'] = function () {\n      return getPlugin(config.pluginRef);\n    };\n\n    cls['checkInstall'] = function () {\n      return checkAvailability(cls) === true;\n    };\n\n    cls['getPluginName'] = function () {\n      return config.pluginName;\n    };\n\n    cls['getPluginRef'] = function () {\n      return config.pluginRef;\n    };\n\n    cls['getPluginInstallName'] = function () {\n      return config.plugin;\n    };\n\n    cls['getPluginRepo'] = function () {\n      return config.repo;\n    };\n\n    cls['getSupportedPlatforms'] = function () {\n      return config.platforms;\n    };\n\n    return cls;\n  };\n}\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\n\nexport function Cordova(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return function (target, methodName, descriptor) {\n    return {\n      value: function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return wrap(this, methodName, opts).apply(this, args);\n      },\n      enumerable: true\n    };\n  };\n}\n/**\n * @private\n *\n * Wrap an instance method\n */\n\nexport function CordovaInstance(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return function (target, methodName) {\n    return {\n      value: function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return wrapInstance(this, methodName, opts).apply(this, args);\n      },\n      enumerable: true\n    };\n  };\n}\n/**\n * @private\n *\n *\n * Before calling the original method, ensure Cordova and the plugin are installed.\n */\n\nexport function CordovaProperty(target, key) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: function () {\n      if (checkAvailability(target, key) === true) {\n        return getPlugin(target.constructor.getPluginRef())[key];\n      } else {\n        return null;\n      }\n    },\n    set: function (value) {\n      if (checkAvailability(target, key) === true) {\n        getPlugin(target.constructor.getPluginRef())[key] = value;\n      }\n    }\n  });\n}\n/**\n * @private\n * @param target\n * @param key\n * @constructor\n */\n\nexport function InstanceProperty(target, key) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: function () {\n      return this._objectInstance[key];\n    },\n    set: function (value) {\n      this._objectInstance[key] = value;\n    }\n  });\n}\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\n\nexport function CordovaFunctionOverride(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return function (target, methodName, descriptor) {\n    return {\n      value: function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return overrideFunction(this, methodName, opts);\n      },\n      enumerable: true\n    };\n  };\n}","map":{"version":3,"sources":["../../../src/@ionic-native/core/decorators.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { _throw } from 'rxjs/observable/throw';\n\nimport { checkAvailability, instanceAvailability, overrideFunction, wrap, wrapInstance } from './plugin';\nimport { getPlugin, getPromise } from './util';\n\nexport interface PluginConfig {\n  /**\n   * Plugin name, this should match the class name\n   */\n  pluginName: string;\n  /**\n   * Plugin NPM package name\n   */\n  plugin: string;\n  /**\n   * Plugin object reference\n   */\n  pluginRef?: string;\n  /**\n   * Github repository URL\n   */\n  repo?: string;\n  /**\n   * Custom install command\n   */\n  install?: string;\n  /**\n   * Available installation variables\n   */\n  installVariables?: string[];\n  /**\n   * Supported platforms\n   */\n  platforms?: string[];\n\n  [key: string]: any;\n}\n\nexport interface CordovaOptions {\n  destruct?: boolean;\n  /**\n   * Set to true if the wrapped method is a sync function\n   */\n  sync?: boolean;\n  /**\n   * Callback order. Set to reverse if the success/error callbacks are the first 2 arguments that the wrapped method takes.\n   */\n  callbackOrder?: 'reverse';\n  /**\n   * Callback style\n   */\n  callbackStyle?: 'node' | 'object';\n  /**\n   * Set a custom index for the success callback function. This doesn't work if callbackOrder or callbackStyle are set.\n   */\n  successIndex?: number;\n  /**\n   * Set a custom index for the error callback function. This doesn't work if callbackOrder or callbackStyle are set.\n   */\n  errorIndex?: number;\n  /**\n   * Success function property name. This must be set if callbackStyle is set to object.\n   */\n  successName?: string;\n  /**\n   * Error function property name. This must be set if callbackStyle is set to object.\n   */\n  errorName?: string;\n  /**\n   * Set to true to return an observable\n   */\n  observable?: boolean;\n  /**\n   * If observable is set to true, this can be set to a different function name that will cancel the observable.\n   */\n  clearFunction?: string;\n  /**\n   * This can be used if clearFunction is set. Set this to true to call the clearFunction with the same arguments used in the initial function.\n   */\n  clearWithArgs?: boolean;\n  /**\n   * Creates an observable that wraps a global event. Replaces document.addEventListener\n   */\n  eventObservable?: boolean;\n  /**\n   * Event name, this must be set if eventObservable is set to true\n   */\n  event?: string;\n  /**\n   * Element to attach the event listener to, this is optional, defaults to `window`\n   */\n  element?: any;\n  /**\n   * Set to true if the wrapped method returns a promise\n   */\n  otherPromise?: boolean;\n  /**\n   * Supported platforms\n   */\n  platforms?: string[];\n}\n\nexport interface CordovaCheckOptions {\n  sync?: boolean;\n  observable?: boolean;\n}\n\n/**\n * @private\n */\nexport function InstanceCheck(opts: CordovaCheckOptions = {}) {\n  return (\n    pluginObj: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ): TypedPropertyDescriptor<any> => {\n    return {\n      value(...args: any[]): any {\n        if (instanceAvailability(this)) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return;\n          } else if (opts.observable) {\n            return new Observable<any>(() => {});\n          }\n\n          return getPromise(() => {});\n        }\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * Executes function only if plugin is available\n * @private\n */\nexport function CordovaCheck(opts: CordovaCheckOptions = {}) {\n  return (\n    pluginObj: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ): TypedPropertyDescriptor<any> => {\n    return {\n      value(...args: any[]): any {\n        const check = checkAvailability(pluginObj);\n        if (check === true) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return null;\n          } else if (opts.observable) {\n            return _throw(new Error(check && check.error));\n          }\n          return Promise.reject(check && check.error);\n        }\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * @private\n *\n * Class decorator specifying Plugin metadata. Required for all plugins.\n *\n * @usage\n * ```typescript\n * @Plugin({\n *  pluginName: 'MyPlugin',\n *  plugin: 'cordova-plugin-myplugin',\n *  pluginRef: 'window.myplugin'\n *  })\n *  export class MyPlugin {\n *\n *    // Plugin wrappers, properties, and functions go here ...\n *\n *  }\n * ```\n */\nexport function Plugin(config: PluginConfig): ClassDecorator {\n  return (cls: any) => {\n    // Add these fields to the class\n    for (const prop in config) {\n      cls[prop] = config[prop];\n    }\n\n    cls['installed'] = (printWarning?: boolean) => {\n      return !!getPlugin(config.pluginRef);\n    };\n\n    cls['getPlugin'] = () => {\n      return getPlugin(config.pluginRef);\n    };\n\n    cls['checkInstall'] = () => {\n      return checkAvailability(cls) === true;\n    };\n\n    cls['getPluginName'] = () => {\n      return config.pluginName;\n    };\n\n    cls['getPluginRef'] = () => {\n      return config.pluginRef;\n    };\n\n    cls['getPluginInstallName'] = () => {\n      return config.plugin;\n    };\n\n    cls['getPluginRepo'] = () => {\n      return config.repo;\n    };\n\n    cls['getSupportedPlatforms'] = () => {\n      return config.platforms;\n    };\n\n    return cls;\n  };\n}\n\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nexport function Cordova(opts: CordovaOptions = {}) {\n  return (\n    target: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ) => {\n    return {\n      value(...args: any[]) {\n        return wrap(this, methodName, opts).apply(this, args);\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * @private\n *\n * Wrap an instance method\n */\nexport function CordovaInstance(opts: CordovaOptions = {}) {\n  return (target: Object, methodName: string) => {\n    return {\n      value(...args: any[]) {\n        return wrapInstance(this, methodName, opts).apply(this, args);\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * @private\n *\n *\n * Before calling the original method, ensure Cordova and the plugin are installed.\n */\nexport function CordovaProperty(target: any, key: string) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: () => {\n      if (checkAvailability(target, key) === true) {\n        return getPlugin(target.constructor.getPluginRef())[key];\n      } else {\n        return null;\n      }\n    },\n    set: value => {\n      if (checkAvailability(target, key) === true) {\n        getPlugin(target.constructor.getPluginRef())[key] = value;\n      }\n    }\n  });\n}\n\n/**\n * @private\n * @param target\n * @param key\n * @constructor\n */\nexport function InstanceProperty(target: any, key: string) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get() {\n      return this._objectInstance[key];\n    },\n    set(value) {\n      this._objectInstance[key] = value;\n    }\n  });\n}\n\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nexport function CordovaFunctionOverride(opts: any = {}) {\n  return (\n    target: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ) => {\n    return {\n      value(...args: any[]) {\n        return overrideFunction(this, methodName, opts);\n      },\n      enumerable: true\n    };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}